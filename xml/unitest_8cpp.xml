<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="unitest_8cpp" kind="file">
    <compoundname>unitest.cpp</compoundname>
    <includes local="no">iostream</includes>
    <includes refid="manager_8h" local="yes">headers/manager.h</includes>
    <includes refid="pathfinding_8h" local="yes">headers/traitement/pathfinding.h</includes>
    <includes refid="definition_8h" local="yes">headers/definition.h</includes>
    <includes local="no">unistd.h</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <incdepgraph>
      <node id="411">
        <label>manager/bloc.h</label>
        <link refid="bloc_8h"/>
        <childnode refid="407" relation="include">
        </childnode>
        <childnode refid="412" relation="include">
        </childnode>
        <childnode refid="408" relation="include">
        </childnode>
        <childnode refid="413" relation="include">
        </childnode>
        <childnode refid="414" relation="include">
        </childnode>
      </node>
      <node id="417">
        <label>stdlib.h</label>
      </node>
      <node id="413">
        <label>../abstract/multipleobject.h</label>
        <link refid="multipleobject_8h"/>
        <childnode refid="408" relation="include">
        </childnode>
      </node>
      <node id="408">
        <label>string</label>
      </node>
      <node id="420">
        <label>cellule.h</label>
        <link refid="cellule_8h"/>
        <childnode refid="407" relation="include">
        </childnode>
      </node>
      <node id="403">
        <label>unitest.cpp</label>
        <link refid="unitest.cpp"/>
        <childnode refid="404" relation="include">
        </childnode>
        <childnode refid="405" relation="include">
        </childnode>
        <childnode refid="418" relation="include">
        </childnode>
        <childnode refid="414" relation="include">
        </childnode>
        <childnode refid="421" relation="include">
        </childnode>
        <childnode refid="407" relation="include">
        </childnode>
        <childnode refid="412" relation="include">
        </childnode>
      </node>
      <node id="406">
        <label>manager/car.h</label>
        <link refid="car_8h"/>
        <childnode refid="407" relation="include">
        </childnode>
        <childnode refid="408" relation="include">
        </childnode>
        <childnode refid="409" relation="include">
        </childnode>
      </node>
      <node id="421">
        <label>unistd.h</label>
      </node>
      <node id="412">
        <label>vector</label>
      </node>
      <node id="407">
        <label>utility</label>
      </node>
      <node id="410">
        <label>sstream</label>
      </node>
      <node id="405">
        <label>headers/manager.h</label>
        <link refid="manager_8h"/>
        <childnode refid="406" relation="include">
        </childnode>
        <childnode refid="411" relation="include">
        </childnode>
        <childnode refid="415" relation="include">
        </childnode>
        <childnode refid="416" relation="include">
        </childnode>
        <childnode refid="408" relation="include">
        </childnode>
        <childnode refid="407" relation="include">
        </childnode>
        <childnode refid="417" relation="include">
        </childnode>
        <childnode refid="404" relation="include">
        </childnode>
      </node>
      <node id="404">
        <label>iostream</label>
      </node>
      <node id="416">
        <label>manager/arrive.h</label>
        <link refid="arrive_8h"/>
        <childnode refid="407" relation="include">
        </childnode>
        <childnode refid="408" relation="include">
        </childnode>
        <childnode refid="409" relation="include">
        </childnode>
      </node>
      <node id="415">
        <label>manager/chemin.h</label>
        <link refid="chemin_8h"/>
        <childnode refid="407" relation="include">
        </childnode>
        <childnode refid="412" relation="include">
        </childnode>
        <childnode refid="408" relation="include">
        </childnode>
        <childnode refid="413" relation="include">
        </childnode>
      </node>
      <node id="409">
        <label>../abstract/simpleobject.h</label>
        <link refid="simpleobject_8h"/>
        <childnode refid="410" relation="include">
        </childnode>
        <childnode refid="408" relation="include">
        </childnode>
        <childnode refid="407" relation="include">
        </childnode>
      </node>
      <node id="419">
        <label>algorithm</label>
      </node>
      <node id="418">
        <label>headers/traitement/pathfinding.h</label>
        <link refid="pathfinding_8h"/>
        <childnode refid="404" relation="include">
        </childnode>
        <childnode refid="412" relation="include">
        </childnode>
        <childnode refid="407" relation="include">
        </childnode>
        <childnode refid="419" relation="include">
        </childnode>
        <childnode refid="420" relation="include">
        </childnode>
        <childnode refid="414" relation="include">
        </childnode>
        <childnode refid="405" relation="include">
        </childnode>
      </node>
      <node id="414">
        <label>../definition.h</label>
        <link refid="definition_8h"/>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="unitest_8cpp_1a8fe7cee2b1a0e3b6c36ff74b48615626" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void unitest_pathfinding</definition>
        <argsstring>(int8_t x, int8_t y)</argsstring>
        <name>unitest_pathfinding</name>
        <param>
          <type>int8_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/glegall/prog_workspace/Robot_car/prog/unitest.cpp" line="21" column="1" bodyfile="/home/glegall/prog_workspace/Robot_car/prog/unitest.cpp" bodystart="21" bodyend="75"/>
        <references refid="classChemin_1a2ee7b6a34082453fbdf890a49017aead" compoundref="chemin_8cpp" startline="16" endline="19">Chemin::add</references>
        <references refid="classBloc_1a02db4c95699ce40e8ad671ef759ebdb7" compoundref="bloc_8cpp" startline="16" endline="19">Bloc::add</references>
        <references refid="classManager_1a6f99d8e25fc61a7fe0fdf160610b31cf" compoundref="manager_8h" startline="40">Manager::arrive</references>
        <references refid="classManager_1a66599bf2bd10c95b9fb7be9c333e0ff9" compoundref="manager_8h" startline="38">Manager::bloc</references>
        <references refid="classManager_1a2803dff8e8f2912242f4098991d91415" compoundref="manager_8h" startline="37">Manager::car</references>
        <references refid="classManager_1abaeefec28074459f6dbdc64af9c6a3b9" compoundref="manager_8h" startline="39">Manager::chemin</references>
        <references refid="classManager_1a21b3e54cbe4b045b9ac40ee53e403897" compoundref="manager_8cpp" startline="47" endline="58">Manager::forDevelopper</references>
        <references refid="classPathFinding_1aff1ca43a0ea5e4b9e5e188f165f08cd2" compoundref="pathfinding_8h" startline="84" endline="103">PathFinding::getChemin</references>
        <references refid="classManager_1a963d327a438d93b100ff68b475d2cf83" compoundref="manager_8h" startline="72" endline="74">Manager::getGeneralTable</references>
        <references refid="classCar_1a40cbec40dad9ddda76c277da17f23528" compoundref="car_8cpp" startline="9" endline="14">Car::getInstance</references>
        <references refid="classBloc_1af357c5eeff01b5b41d983b1e42f5c115" compoundref="bloc_8cpp" startline="9" endline="14">Bloc::getInstance</references>
        <references refid="classManager_1a5d783bd86e9be93235898a46de80847f" compoundref="manager_8cpp" startline="8" endline="13">Manager::getInstance</references>
        <references refid="classCar_1a20dd521474ee36b144bde58e3359eed6" compoundref="car_8h" startline="25" endline="27">Car::getPosition</references>
        <references refid="classArrive_1abe91e4a5bcf15ff987ab58c05b6bb537" compoundref="arrive_8h" startline="34" endline="36">Arrive::getPosition</references>
        <references refid="classManager_1a18e77e06ef097db9e010835e7930bd3f" compoundref="manager_8h" startline="83" endline="85">Manager::getSceneCarrer</references>
        <references refid="classBloc_1a03799c83e18411ab4ae4bf3e03aec975" compoundref="bloc_8cpp" startline="29" endline="31">Bloc::has</references>
        <references refid="classPathFinding_1a8d70d17f06400cdcd5787331d7be38e2" compoundref="pathfinding_8h" startline="73" endline="75">PathFinding::hasPossibility</references>
        <references refid="struct__shareM_1a30792c4b007e8273d3832fe2d5e70987" compoundref="share__server_8h" startline="14">_shareM::index</references>
        <references refid="classManager_1a24a0a31be841d8707708874486cb1b7c" compoundref="manager_8h" startline="95" endline="113">Manager::initScene</references>
        <references refid="classBloc_1a259248faed302444ba5424cdf6178681" compoundref="bloc_8cpp" startline="21" endline="27">Bloc::remove</references>
        <references refid="classCar_1a97e3c5de8eb65659ef520de6591f814d" compoundref="car_8h" startline="21" endline="24">Car::setPosition</references>
        <references refid="classArrive_1ab0484a9338e3774c5fa824153b1470e2" compoundref="arrive_8h" startline="29" endline="33">Arrive::setPosition</references>
        <references refid="classBloc_1a040af8a2aefc1acaa0e2d9bfc5943fa3" compoundref="bloc_8cpp" startline="33" endline="45">Bloc::toString</references>
        <references refid="classManager_1af43da42550bd9746c5ea61a6aeee80de" compoundref="manager_8cpp" startline="15" endline="37">Manager::update</references>
        <referencedby refid="unitest_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="unitest_8cpp" startline="77" endline="95">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="unitest_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/glegall/prog_workspace/Robot_car/prog/unitest.cpp" line="77" column="1" bodyfile="/home/glegall/prog_workspace/Robot_car/prog/unitest.cpp" bodystart="77" bodyend="95"/>
        <references refid="unitest_8cpp_1a8fe7cee2b1a0e3b6c36ff74b48615626" compoundref="unitest_8cpp" startline="21" endline="75">unitest_pathfinding</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="manager_8h" kindref="compound">headers/manager.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pathfinding_8h" kindref="compound">headers/traitement/pathfinding.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="definition_8h" kindref="compound">headers/definition.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>---------UNITEST<sp/>USAGE---------</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Usage:</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>./unitest<sp/>images<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;<sp/><sp/><sp/><sp/><sp/>Display<sp/>Unitest<sp/>from<sp/>Images<sp/>processing</highlight></codeline>
<codeline lineno="15"><highlight class="comment"></highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>./unitest<sp/>pathfinding<sp/>&lt;X&gt;<sp/>&lt;Y&gt;<sp/><sp/><sp/>&gt;<sp/><sp/><sp/><sp/><sp/>Display<sp/>Unitest<sp/>from<sp/>Pathfinding<sp/>processing</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;X&gt;<sp/>&lt;Y&gt;<sp/>coordonate<sp/>of<sp/>a<sp/>block<sp/>(x2<sp/>y2<sp/>to<sp/>have<sp/>not<sp/>possibility,<sp/>0<sp/>&gt;=<sp/>x<sp/>and<sp/>y<sp/>&lt;<sp/>4)</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>---------UNITEST<sp/>USAGE---------</highlight></codeline>
<codeline lineno="19"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="unitest_8cpp_1a8fe7cee2b1a0e3b6c36ff74b48615626" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="unitest_8cpp_1a8fe7cee2b1a0e3b6c36ff74b48615626" kindref="member">unitest_pathfinding</ref>(int8_t<sp/>x,<sp/>int8_t<sp/>y){</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classManager" kindref="compound">Manager</ref><sp/>*test1<sp/>=<sp/><ref refid="classManager_1a5d783bd86e9be93235898a46de80847f" kindref="member">Manager::getInstance</ref>();</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classManager" kindref="compound">Manager</ref><sp/>*test2<sp/>=<sp/><ref refid="classManager_1a5d783bd86e9be93235898a46de80847f" kindref="member">Manager::getInstance</ref>();</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>test1-&gt;<ref refid="classManager_1a24a0a31be841d8707708874486cb1b7c" kindref="member">initScene</ref>(4);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;No<sp/>Duplicate<sp/>Manager\t\t<sp/>|<sp/>\t\t%s\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test1-&gt;<ref refid="classManager_1a5d783bd86e9be93235898a46de80847f" kindref="member">getInstance</ref>()<sp/>==<sp/>test2-&gt;<ref refid="classManager_1a5d783bd86e9be93235898a46de80847f" kindref="member">getInstance</ref>()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;OK&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;KO<sp/>&lt;-~-~-~&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;No<sp/>Duplicate<sp/>Car\t\t<sp/>|<sp/>\t\t%s\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test1-&gt;<ref refid="classManager_1a2803dff8e8f2912242f4098991d91415" kindref="member">car</ref>-&gt;<ref refid="classCar_1a40cbec40dad9ddda76c277da17f23528" kindref="member">getInstance</ref>()<sp/>==<sp/>test2-&gt;<ref refid="classManager_1a2803dff8e8f2912242f4098991d91415" kindref="member">car</ref>-&gt;<ref refid="classCar_1a40cbec40dad9ddda76c277da17f23528" kindref="member">getInstance</ref>()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;OK&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;KO<sp/>&lt;-~-~-~&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;No<sp/>Duplicate<sp/>Bloc\t\t<sp/>|<sp/>\t\t%s\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test1-&gt;<ref refid="classManager_1a66599bf2bd10c95b9fb7be9c333e0ff9" kindref="member">bloc</ref>-&gt;<ref refid="classBloc_1af357c5eeff01b5b41d983b1e42f5c115" kindref="member">getInstance</ref>()<sp/>==<sp/>test2-&gt;<ref refid="classManager_1a66599bf2bd10c95b9fb7be9c333e0ff9" kindref="member">bloc</ref>-&gt;<ref refid="classBloc_1af357c5eeff01b5b41d983b1e42f5c115" kindref="member">getInstance</ref>()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;OK&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;KO<sp/>&lt;-~-~-~&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBloc" kindref="compound">Bloc</ref><sp/>*b<sp/>=<sp/>test1-&gt;<ref refid="classManager_1a66599bf2bd10c95b9fb7be9c333e0ff9" kindref="member">bloc</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Add<sp/>Bloc<sp/>\tx%d<sp/>y%d\t\t<sp/>|<sp/>\t\t%s\n&quot;</highlight><highlight class="normal">,x,y,<sp/>(b-&gt;<ref refid="classBloc_1a02db4c95699ce40e8ad671ef759ebdb7" kindref="member">add</ref>(x,<sp/>y)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;OK&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;KO<sp/>&lt;-~-~-~&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Exist<sp/>Bloc<sp/>\tx%d<sp/>y%d\t\t<sp/>|<sp/>\t\t%s\n&quot;</highlight><highlight class="normal">,x,y,<sp/>(b-&gt;<ref refid="classBloc_1a03799c83e18411ab4ae4bf3e03aec975" kindref="member">has</ref>(x,<sp/>y)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;OK&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;KO<sp/>&lt;-~-~-~&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>b-&gt;<ref refid="classBloc_1a02db4c95699ce40e8ad671ef759ebdb7" kindref="member">add</ref>(0,<sp/>2);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>b-&gt;<ref refid="classBloc_1a02db4c95699ce40e8ad671ef759ebdb7" kindref="member">add</ref>(1,<sp/>2);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>b-&gt;<ref refid="classBloc_1a02db4c95699ce40e8ad671ef759ebdb7" kindref="member">add</ref>(3,<sp/>2);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>comp<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>\&quot;Bloc\&quot;:<sp/>{<sp/>\&quot;Number\&quot;:<sp/>4,<sp/>\&quot;Position\&quot;:<sp/>{\&quot;0\&quot;:<sp/>\&quot;&quot;</highlight><highlight class="normal">+<sp/></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to_string(x)<sp/>+</highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">+<sp/>to_string(y)<sp/>+</highlight><highlight class="stringliteral">&quot;\&quot;,<sp/>\&quot;1\&quot;:<sp/>\&quot;0,2\&quot;,<sp/>\&quot;2\&quot;:<sp/>\&quot;1,2\&quot;,<sp/>\&quot;3\&quot;:<sp/>\&quot;3,2\&quot;,}<sp/>}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;comp&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;b-&gt;<ref refid="classBloc_1a040af8a2aefc1acaa0e2d9bfc5943fa3" kindref="member">toString</ref>()&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;toString<sp/>function\t\t<sp/>|<sp/>\t\t%s\n&quot;</highlight><highlight class="normal">,<sp/>(comp<sp/>==<sp/>b-&gt;<ref refid="classBloc_1a040af8a2aefc1acaa0e2d9bfc5943fa3" kindref="member">toString</ref>()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;OK&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;KO<sp/>&lt;-~-~-~&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Remove<sp/>Bloc<sp/>\tx%d<sp/>y%d\t\t<sp/>|<sp/>\t\t%s\n&quot;</highlight><highlight class="normal">,x,y,<sp/>(b-&gt;<ref refid="classBloc_1a259248faed302444ba5424cdf6178681" kindref="member">remove</ref>(x,<sp/>y)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;OK&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;KO<sp/>&lt;-~-~-~&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Dont<sp/>Exist<sp/>Bloc<sp/>\tx%d<sp/>y%d\t<sp/>|<sp/>\t\t%s\n&quot;</highlight><highlight class="normal">,x,y,<sp/>(!b-&gt;<ref refid="classBloc_1a03799c83e18411ab4ae4bf3e03aec975" kindref="member">has</ref>(x,<sp/>y)<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;OK&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;KO<sp/>&lt;-~-~-~&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>b-&gt;<ref refid="classBloc_1a02db4c95699ce40e8ad671ef759ebdb7" kindref="member">add</ref>(x,<sp/>y);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>test1-&gt;<ref refid="classManager_1af43da42550bd9746c5ea61a6aeee80de" kindref="member">update</ref>();</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCar" kindref="compound">Car</ref><sp/>*car<sp/>=<sp/>test1-&gt;<ref refid="classManager_1a2803dff8e8f2912242f4098991d91415" kindref="member">car</ref>;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Default<sp/>Position<sp/>Car<sp/>x-1<sp/>y-1\t<sp/>|<sp/>\t\t%s\n&quot;</highlight><highlight class="normal">,<sp/>(car-&gt;<ref refid="classCar_1a20dd521474ee36b144bde58e3359eed6" kindref="member">getPosition</ref>().first<sp/>==<sp/>-1<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;OK&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;KO<sp/>&lt;-~-~-~&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>car-&gt;<ref refid="classCar_1a97e3c5de8eb65659ef520de6591f814d" kindref="member">setPosition</ref>(3,<sp/>0);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Position<sp/>Car<sp/>\tx%d<sp/>y%d\t\t<sp/>|<sp/>\t\t%s\n&quot;</highlight><highlight class="normal">,3,0,<sp/>(</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>car-&gt;<ref refid="classCar_1a20dd521474ee36b144bde58e3359eed6" kindref="member">getPosition</ref>().first<sp/>==<sp/>3<sp/>&amp;&amp;<sp/>car-&gt;<ref refid="classCar_1a20dd521474ee36b144bde58e3359eed6" kindref="member">getPosition</ref>().second<sp/>==<sp/>0<sp/><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;OK&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;KO<sp/>&lt;-~-~-~&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classArrive" kindref="compound">Arrive</ref><sp/>*arrive<sp/>=<sp/>test1-&gt;<ref refid="classManager_1a6f99d8e25fc61a7fe0fdf160610b31cf" kindref="member">arrive</ref>;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Default<sp/>Position<sp/>Arrive<sp/>x-1<sp/>y-1\t<sp/>|<sp/>\t\t%s\n&quot;</highlight><highlight class="normal">,<sp/>(arrive-&gt;<ref refid="classArrive_1abe91e4a5bcf15ff987ab58c05b6bb537" kindref="member">getPosition</ref>().first<sp/>==<sp/>-1<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;OK&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;KO<sp/>&lt;-~-~-~&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>arrive-&gt;<ref refid="classArrive_1ab0484a9338e3774c5fa824153b1470e2" kindref="member">setPosition</ref>(0,<sp/>3);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Position<sp/>Arrive<sp/>\tx%d<sp/>y%d\t<sp/>|<sp/>\t\t%s\n&quot;</highlight><highlight class="normal">,0,3,<sp/>(</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arrive-&gt;<ref refid="classArrive_1abe91e4a5bcf15ff987ab58c05b6bb537" kindref="member">getPosition</ref>().first<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>arrive-&gt;<ref refid="classArrive_1abe91e4a5bcf15ff987ab58c05b6bb537" kindref="member">getPosition</ref>().second<sp/>==<sp/>3<sp/><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;OK&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;KO<sp/>&lt;-~-~-~&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>test1-&gt;<ref refid="classManager_1af43da42550bd9746c5ea61a6aeee80de" kindref="member">update</ref>();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;test1-&gt;<ref refid="classManager_1a21b3e54cbe4b045b9ac40ee53e403897" kindref="member">forDevelopper</ref>()&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPathFinding" kindref="compound">PathFinding</ref><sp/>*path<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classPathFinding" kindref="compound">PathFinding</ref>(</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test1-&gt;<ref refid="classManager_1a963d327a438d93b100ff68b475d2cf83" kindref="member">getGeneralTable</ref>(),<sp/>test1-&gt;<ref refid="classManager_1a18e77e06ef097db9e010835e7930bd3f" kindref="member">getSceneCarrer</ref>(),<sp/>test1-&gt;<ref refid="classManager_1a18e77e06ef097db9e010835e7930bd3f" kindref="member">getSceneCarrer</ref>(),<sp/></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>car-&gt;<ref refid="classCar_1a20dd521474ee36b144bde58e3359eed6" kindref="member">getPosition</ref>(),<sp/>arrive-&gt;<ref refid="classArrive_1abe91e4a5bcf15ff987ab58c05b6bb537" kindref="member">getPosition</ref>()</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(path-&gt;<ref refid="classPathFinding_1a8d70d17f06400cdcd5787331d7be38e2" kindref="member">hasPossibility</ref>()){</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Is<sp/>Possible\t\t\t<sp/>|<sp/>\t\tOK\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::pair&lt;int8_t,<sp/>int8_t&gt;&gt;<sp/>*cheminTerminate<sp/>=<sp/>path-&gt;<ref refid="classPathFinding_1aff1ca43a0ea5e4b9e5e188f165f08cd2" kindref="member">getChemin</ref>();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(int8_t<sp/><ref refid="struct__shareM_1a30792c4b007e8273d3832fe2d5e70987" kindref="member">index</ref>=0;<sp/><ref refid="struct__shareM_1a30792c4b007e8273d3832fe2d5e70987" kindref="member">index</ref><sp/>&lt;<sp/>(int8_t)cheminTerminate-&gt;size()<sp/>-<sp/>1;<sp/>++<ref refid="struct__shareM_1a30792c4b007e8273d3832fe2d5e70987" kindref="member">index</ref>)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test1-&gt;<ref refid="classManager_1abaeefec28074459f6dbdc64af9c6a3b9" kindref="member">chemin</ref>-&gt;<ref refid="classChemin_1a2ee7b6a34082453fbdf890a49017aead" kindref="member">add</ref>(cheminTerminate-&gt;at(<ref refid="struct__shareM_1a30792c4b007e8273d3832fe2d5e70987" kindref="member">index</ref>).first,<sp/>cheminTerminate-&gt;at(<ref refid="struct__shareM_1a30792c4b007e8273d3832fe2d5e70987" kindref="member">index</ref>).second);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test1-&gt;<ref refid="classManager_1af43da42550bd9746c5ea61a6aeee80de" kindref="member">update</ref>();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Chemin<sp/>Correct\t\t\t<sp/>|<sp/>\t\t%s\n&quot;</highlight><highlight class="normal">,<sp/>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)cheminTerminate-&gt;size()<sp/>==<sp/>6<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;OK&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;KO<sp/>&lt;-~-~-~&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Not<sp/>Possible\t\t\t<sp/>|<sp/>\t\tOK\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>test1;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>test1<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Delete<sp/>Manager\t\t\t<sp/>|<sp/>\t\t%s\n&quot;</highlight><highlight class="normal">,<sp/>(test1<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>?<sp/></highlight><highlight class="stringliteral">&quot;OK&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;KO<sp/>&lt;-~-~-~&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="unitest_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="unitest_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*argv[]){</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(argc<sp/>&gt;<sp/>1){</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(argc<sp/>==<sp/>2){<sp/></highlight><highlight class="comment">//<sp/>./unitest<sp/>images</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;[WAIT]<sp/>No<sp/>unitest<sp/>for<sp/>images<sp/>processing<sp/>NOW\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(argc<sp/>==<sp/>4){<sp/></highlight><highlight class="comment">//<sp/>./unitest<sp/>pathfinding<sp/>&lt;X&gt;<sp/>&lt;Y&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>atoi(argv[2]);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>atoi(argv[3]);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(x<sp/>&lt;<sp/>4<sp/>&amp;&amp;<sp/>x<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>y<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>y<sp/>&lt;<sp/>4){</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unitest_8cpp_1a8fe7cee2b1a0e3b6c36ff74b48615626" kindref="member">unitest_pathfinding</ref>((int8_t)x,<sp/>(int8_t)y);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n\t\t---------UNITEST<sp/>USAGE---------\n\tUsage:\n\n\t./unitest<sp/>images\t\t&gt;\tDisplay<sp/>Unitest<sp/>from<sp/>Images<sp/>processing\n\n\t./unitest<sp/>pathfinding<sp/>&lt;X&gt;<sp/>&lt;Y&gt;\t&gt;\tDisplay<sp/>Unitest<sp/>from<sp/>Pathfinding<sp/>processing\n\t\t&lt;X&gt;<sp/>&lt;Y&gt;<sp/>coordonate<sp/>of<sp/>a<sp/>block<sp/>(x2<sp/>y2<sp/>to<sp/>have<sp/>not<sp/>possibility,<sp/>0<sp/>&gt;=<sp/>x<sp/>and<sp/>y<sp/>&lt;<sp/>4)\n\t\t---------UNITEST<sp/>USAGE---------\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/glegall/prog_workspace/Robot_car/prog/unitest.cpp"/>
  </compounddef>
</doxygen>
