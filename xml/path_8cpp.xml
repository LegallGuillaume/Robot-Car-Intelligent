<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="path_8cpp" kind="file">
    <compoundname>path.cpp</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">sstream</includes>
    <includes refid="path_8h" local="yes">../headers/manager/path.h</includes>
    <includes refid="definition_8h" local="yes">../headers/definition.h</includes>
    <incdepgraph>
      <node id="662">
        <label>../abstract/multipleobject.h</label>
        <link refid="multipleobject_8h"/>
        <childnode refid="661" relation="include">
        </childnode>
      </node>
      <node id="661">
        <label>string</label>
      </node>
      <node id="660">
        <label>vector</label>
      </node>
      <node id="659">
        <label>utility</label>
      </node>
      <node id="657">
        <label>sstream</label>
      </node>
      <node id="654">
        <label>sources/path.cpp</label>
        <link refid="path.cpp"/>
        <childnode refid="655" relation="include">
        </childnode>
        <childnode refid="656" relation="include">
        </childnode>
        <childnode refid="657" relation="include">
        </childnode>
        <childnode refid="658" relation="include">
        </childnode>
        <childnode refid="663" relation="include">
        </childnode>
      </node>
      <node id="655">
        <label>iostream</label>
      </node>
      <node id="658">
        <label>../headers/manager/path.h</label>
        <link refid="path_8h"/>
        <childnode refid="659" relation="include">
        </childnode>
        <childnode refid="660" relation="include">
        </childnode>
        <childnode refid="661" relation="include">
        </childnode>
        <childnode refid="662" relation="include">
        </childnode>
      </node>
      <node id="656">
        <label>algorithm</label>
      </node>
      <node id="663">
        <label>../headers/definition.h</label>
        <link refid="definition_8h"/>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../headers/manager/path.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../headers/definition.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"><ref refid="class_path" kindref="compound">Path</ref><sp/>*<sp/>Path::instance<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="class_path_1a183700997f2499f31dc2a533c9ace59a" refkind="member"><highlight class="normal"><ref refid="class_path" kindref="compound">Path</ref><sp/>*<sp/><ref refid="class_path_1a183700997f2499f31dc2a533c9ace59a" kindref="member">Path::getInstance</ref>(){</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(instance<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instance<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_path" kindref="compound">Path</ref>();</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>instance;</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="class_path_1a0b82136bc60497245fef11070a74061b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_path_1a0b82136bc60497245fef11070a74061b" kindref="member">Path::add</ref>(int8_t<sp/>x,<sp/>int8_t<sp/>y){</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_path_1a1aeccb79c82441549c27f7874f78856e" kindref="member">list_path</ref>-&gt;push_back(std::make_pair(x,y));</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::find(<ref refid="class_path_1a1aeccb79c82441549c27f7874f78856e" kindref="member">list_path</ref>-&gt;begin(),<sp/><ref refid="class_path_1a1aeccb79c82441549c27f7874f78856e" kindref="member">list_path</ref>-&gt;end(),<sp/>std::make_pair(x,y))<sp/>!=<sp/><ref refid="class_path_1a1aeccb79c82441549c27f7874f78856e" kindref="member">list_path</ref>-&gt;end();</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="class_path_1a9c22f1b57641acc96547bc8aa04f0fe5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_path_1a9c22f1b57641acc96547bc8aa04f0fe5" kindref="member">Path::remove</ref>(int8_t<sp/>x,<sp/>int8_t<sp/>y){</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_path_1ad2879954ff083fe85ea7e494fb7d1793" kindref="member">has</ref>(x,y)){</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_path_1a1aeccb79c82441549c27f7874f78856e" kindref="member">list_path</ref>-&gt;erase(std::remove(<ref refid="class_path_1a1aeccb79c82441549c27f7874f78856e" kindref="member">list_path</ref>-&gt;begin(),<sp/><ref refid="class_path_1a1aeccb79c82441549c27f7874f78856e" kindref="member">list_path</ref>-&gt;end(),<sp/>std::make_pair(x,y)),<sp/><ref refid="class_path_1a1aeccb79c82441549c27f7874f78856e" kindref="member">list_path</ref>-&gt;end());</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<ref refid="class_path_1ad2879954ff083fe85ea7e494fb7d1793" kindref="member">has</ref>(x,y);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//default<sp/>true<sp/>if<sp/>isn&apos;t<sp/>in<sp/>table.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="class_path_1ad2879954ff083fe85ea7e494fb7d1793" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_path_1ad2879954ff083fe85ea7e494fb7d1793" kindref="member">Path::has</ref>(int8_t<sp/>x,<sp/>int8_t<sp/>y){</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::find(<ref refid="class_path_1a1aeccb79c82441549c27f7874f78856e" kindref="member">list_path</ref>-&gt;begin(),<sp/><ref refid="class_path_1a1aeccb79c82441549c27f7874f78856e" kindref="member">list_path</ref>-&gt;end(),<sp/>std::make_pair(x,y))<sp/>!=<sp/><ref refid="class_path_1a1aeccb79c82441549c27f7874f78856e" kindref="member">list_path</ref>-&gt;end();</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="class_path_1ae9094dd83cfcbe9139a41f7aabda84ce" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="class_path_1ae9094dd83cfcbe9139a41f7aabda84ce" kindref="member">Path::toString</ref>(){</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>int16_t<sp/>size<sp/>=<sp/><ref refid="class_path_1a1aeccb79c82441549c27f7874f78856e" kindref="member">list_path</ref>-&gt;size();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>stringstream<sp/>value;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>int16_t<sp/>i<sp/>=0;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>std::for_each(<ref refid="class_path_1a1aeccb79c82441549c27f7874f78856e" kindref="member">list_path</ref>-&gt;begin(),<sp/><ref refid="class_path_1a1aeccb79c82441549c27f7874f78856e" kindref="member">list_path</ref>-&gt;end(),<sp/>[&amp;](std::pair&lt;int8_t,<sp/>int8_t&gt;<sp/>_b){</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\&quot;&quot;</highlight><highlight class="normal">&lt;&lt;i&lt;&lt;</highlight><highlight class="stringliteral">&quot;\&quot;:<sp/>\&quot;&quot;</highlight><highlight class="normal">&lt;&lt;(int)_b.first&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)_b.second&lt;&lt;</highlight><highlight class="stringliteral">&quot;\&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>stringstream<sp/>buf;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>\&quot;Chemin\&quot;:<sp/>{<sp/>\&quot;Number\&quot;:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;size&lt;&lt;</highlight><highlight class="stringliteral">&quot;,<sp/>\&quot;Position\&quot;:<sp/>{&quot;</highlight><highlight class="normal">&lt;&lt;value.str().substr(0,<sp/>value.str().size()-2)&lt;&lt;</highlight><highlight class="stringliteral">&quot;}<sp/>}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf.str();</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/glegall/prog_workspace/Robot_car/prog/sources/path.cpp"/>
  </compounddef>
</doxygen>
