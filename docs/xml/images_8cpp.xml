<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="images_8cpp" kind="file">
    <compoundname>images.cpp</compoundname>
    <includes refid="images_8h" local="yes">../../headers/traitement/images.h</includes>
    <includes local="no">fstream</includes>
    <includes local="no">unistd.h</includes>
    <incdepgraph>
      <node id="674">
        <label>../../headers/traitement/images.h</label>
        <link refid="images_8h"/>
        <childnode refid="675" relation="include">
        </childnode>
        <childnode refid="676" relation="include">
        </childnode>
        <childnode refid="677" relation="include">
        </childnode>
        <childnode refid="678" relation="include">
        </childnode>
        <childnode refid="679" relation="include">
        </childnode>
        <childnode refid="680" relation="include">
        </childnode>
        <childnode refid="681" relation="include">
        </childnode>
        <childnode refid="682" relation="include">
        </childnode>
      </node>
      <node id="679">
        <label>aruco/cvdrawingutils.h</label>
      </node>
      <node id="673">
        <label>sources/traitement/images.cpp</label>
        <link refid="images.cpp"/>
        <childnode refid="674" relation="include">
        </childnode>
        <childnode refid="683" relation="include">
        </childnode>
        <childnode refid="684" relation="include">
        </childnode>
      </node>
      <node id="676">
        <label>cmath</label>
      </node>
      <node id="678">
        <label>aruco/aruco.h</label>
      </node>
      <node id="683">
        <label>fstream</label>
      </node>
      <node id="681">
        <label>opencv2/imgproc/imgproc.hpp</label>
      </node>
      <node id="684">
        <label>unistd.h</label>
      </node>
      <node id="677">
        <label>vector</label>
      </node>
      <node id="680">
        <label>opencv2/highgui/highgui.hpp</label>
      </node>
      <node id="675">
        <label>iostream</label>
      </node>
      <node id="682">
        <label>../definition.h</label>
        <link refid="definition_8h"/>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;../../headers/traitement/images.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*timeout<sp/>for<sp/>calibration*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="class_images_p_1a18ff58308b1ba5787e1d05f0acd7224a" refkind="member"><highlight class="normal"><ref refid="class_images_p_1a18ff58308b1ba5787e1d05f0acd7224a" kindref="member">ImagesP::ImagesP</ref>(){</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_images_p_1a0527e504ca88cece33edb90fef958c90" kindref="member">init</ref>();</highlight></codeline>
<codeline lineno="8"><highlight class="normal">}</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="class_images_p_1abd4ea58f9cb814dbb27feb5d2d793e53" refkind="member"><highlight class="normal"><ref refid="class_images_p_1abd4ea58f9cb814dbb27feb5d2d793e53" kindref="member">ImagesP::~ImagesP</ref>(){</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_images_p_1a143a67baa23fdc4b1c28beda0bd964f5" kindref="member">cap</ref>.release();</highlight></codeline>
<codeline lineno="12"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="class_images_p_1a002bb2f3148a85c46c954dcc98ad2760" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="class_images_p_1a002bb2f3148a85c46c954dcc98ad2760" kindref="member">ImagesP::getSizeMarker</ref>(){</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_images_p_1ac2813bc8a3edac420df686902806172c" kindref="member">Markers</ref>.size();</highlight></codeline>
<codeline lineno="17"><highlight class="normal">}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="class_images_p_1a0b371e65a472c1cce7d6dc83bd171e4d" refkind="member"><highlight class="normal">Point<sp/><ref refid="class_images_p_1a0b371e65a472c1cce7d6dc83bd171e4d" kindref="member">ImagesP::getXYMatrix</ref>(int16_t<sp/>x_matrix,<sp/>int16_t<sp/>y_matrix){</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Point((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(x_matrix/20),<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)(y_matrix/20));</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="class_images_p_1a03b81fad0317e9939085c5e7538c2efe" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="class_images_p_1a03b81fad0317e9939085c5e7538c2efe" kindref="member">ImagesP::getAngle</ref>(Marker<sp/>marker){</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>Point2f<sp/>p_a<sp/>=<sp/>marker[1];</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>Point2f<sp/>p_b<sp/>=<sp/>marker[2];</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>Point2f<sp/>p_m(0,-1);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>Point2f<sp/>p_i((p_a.x+p_b.x)/2,<sp/>(p_a.y+p_b.y)/2);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>Point2f<sp/>vec<sp/>=<sp/>marker.getCenter()<sp/>-<sp/>p_i;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scal<sp/>=<sp/>vec.x*p_m.x<sp/>+<sp/>vec.y*p_m.y;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>deno<sp/>=<sp/>sqrt(pow(vec.x,2)<sp/>+<sp/>pow(vec.y,2))<sp/>*<sp/>sqrt(pow(p_m.x,2)<sp/>+<sp/>pow(p_m.y,2));</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>acos(scal/deno);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>(r*180/M_PI)-90;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p_a.x<sp/>&gt;<sp/>p_b.x<sp/>&amp;&amp;<sp/>p_a.y<sp/>&gt;=<sp/>p_b.y){</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0<sp/>-<sp/>result<sp/>-<sp/>180;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(p_a.x&lt;p_b.x<sp/>&amp;&amp;<sp/>p_a.y<sp/>&gt;<sp/>p_b.y){</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>180<sp/>-<sp/>result;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Correction<sp/>cause<sp/>by<sp/>pixel<sp/>(angle<sp/>sup<sp/>180<sp/>and<sp/>inf<sp/>to<sp/>-180*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(result<sp/>&gt;<sp/>180){</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>0<sp/>-<sp/>180<sp/>+<sp/>(sqrt(pow(result,2))<sp/>-<sp/>180);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(result<sp/>&lt;<sp/>-180){</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>180<sp/>-<sp/>(sqrt(pow(result,2))<sp/>-<sp/>180);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="class_images_p_1a4e8b4ba0f6f6f408de4cc4c52ac29f27" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_images_p_1a4e8b4ba0f6f6f408de4cc4c52ac29f27" kindref="member">ImagesP::willbeBlock</ref>(Mat&amp;<sp/>frame,<sp/>Point<sp/>leftTop,<sp/>int8_t<sp/>pixelMax){</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>int16_t<sp/>counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(int16_t<sp/>x=leftTop.x;<sp/>x&lt;leftTop.x+18;++x){</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(int16_t<sp/>y=leftTop.y;<sp/>y&lt;leftTop.y+18;++y){</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vec3b<sp/>intensity<sp/>=<sp/>frame.at&lt;Vec3b&gt;(y,<sp/>x);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uchar<sp/>blue<sp/>=<sp/>intensity.val[0];</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uchar<sp/>green<sp/>=<sp/>intensity.val[1];</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uchar<sp/>red<sp/>=<sp/>intensity.val[2];</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(blue<sp/>==<sp/>255<sp/>&amp;&amp;<sp/>green<sp/>==<sp/>255<sp/>&amp;&amp;<sp/>red<sp/>==<sp/>255){</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter++;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(counter<sp/>&gt;=<sp/>pixelMax){</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="class_images_p_1a50c2faf5197f1e0b5d54f4acdb9f82dd" refkind="member"><highlight class="normal">Point2f<sp/><ref refid="class_images_p_1a50c2faf5197f1e0b5d54f4acdb9f82dd" kindref="member">ImagesP::getBlockMatrix</ref>(Point2f<sp/>center,<sp/>int16_t<sp/>x_pixel,<sp/>int16_t<sp/>y_pixel){</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>int16_t<sp/>x_ref<sp/>=<sp/>center.x<sp/>-<sp/>240;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>int16_t<sp/>y_ref<sp/>=<sp/>center.y<sp/>-<sp/>240;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>int16_t<sp/>x_sta<sp/>=<sp/>x_pixel<sp/>-<sp/>x_ref;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>int16_t<sp/>y_sta<sp/>=<sp/>y_pixel<sp/>-<sp/>y_ref;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>int16_t<sp/>x<sp/>=<sp/>(int)(x_pixel/20)*20;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>int16_t<sp/>y<sp/>=<sp/>(int)(y_pixel/20)*20;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Point2f(x+x_ref,<sp/>y+y_ref);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="class_images_p_1a4eee68c40eb47b29e0b738ea38a55353" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_images_p_1a4eee68c40eb47b29e0b738ea38a55353" kindref="member">ImagesP::drawMatrix</ref>(Mat&amp;<sp/>frame,<sp/>Point<sp/>center){</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>int16_t<sp/>RecX1<sp/>=<sp/>center.x-240;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>int16_t<sp/>RecX2<sp/>=<sp/>center.x+240;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>int16_t<sp/>RecY1<sp/>=<sp/>center.y-240;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>int16_t<sp/>RecY2<sp/>=<sp/>center.y+240;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(int16_t<sp/>j=1;<sp/>j&lt;25;j++){</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RecX2<sp/>=<sp/>RecX2<sp/>-<sp/>20;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rectangle(frame,<sp/>Point(RecX1,<sp/>RecY1),<sp/>Point(RecX2,<sp/>RecY2),<sp/>cv::Scalar(0,<sp/>255,<sp/>0));</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>RecX2<sp/>=<sp/>center.x+240;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//horizontal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(int16_t<sp/>j=1;<sp/>j&lt;25;j++){</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RecY2<sp/>=<sp/>RecY2<sp/>-<sp/>20;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rectangle(frame,<sp/>Point(RecX1,<sp/>RecY1),<sp/>Point(RecX2,<sp/>RecY2),<sp/>cv::Scalar(0,<sp/>255,<sp/>0));</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="class_images_p_1aab5950c25ea44c06bc4026ce6dece7fa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_images_p_1aab5950c25ea44c06bc4026ce6dece7fa" kindref="member">ImagesP::fillRotatedRect</ref>(Mat&amp;<sp/>frame,<sp/>Point2f<sp/>center,<sp/>Size2f<sp/>size,<sp/>Scalar<sp/>color,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle){</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>RotatedRect<sp/>rect(center,<sp/>size,<sp/>angle);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Point2f<sp/>vertices2f[4];</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>rect.points(vertices2f);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Point<sp/>vertices[4];</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i){</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertices[i]<sp/>=<sp/>vertices2f[i];</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::fillConvexPoly(frame,vertices,<sp/>4,<sp/>color);</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="class_images_p_1af8bad8cf7cb3be74c084a0efc86ca73f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_images_p_1af8bad8cf7cb3be74c084a0efc86ca73f" kindref="member">ImagesP::markersProcessing</ref>(Point2f<sp/>centerPt){</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int16_t<sp/>i=0;i&lt;<ref refid="class_images_p_1ac2813bc8a3edac420df686902806172c" kindref="member">Markers</ref>.size();i++)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int16_t<sp/>x<sp/>=<sp/>(int16_t)<ref refid="class_images_p_1ac2813bc8a3edac420df686902806172c" kindref="member">Markers</ref>[i].getCenter().x;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int16_t<sp/>y<sp/>=<sp/>(int16_t)<ref refid="class_images_p_1ac2813bc8a3edac420df686902806172c" kindref="member">Markers</ref>[i].getCenter().y;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point2f<sp/>new_center<sp/>=<sp/><ref refid="class_images_p_1ac2813bc8a3edac420df686902806172c" kindref="member">Markers</ref>[i].getCenter()<sp/>-<sp/>centerPt;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_center<sp/>+=<sp/>Point2f(240,240);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_images_p_1ac2813bc8a3edac420df686902806172c" kindref="member">Markers</ref>[i].</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/><ref refid="definition_8h_1a6036f5d317ce1f843aae2fdd46d845c9" kindref="member">MARKER_ID_AREA</ref>){</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_images_p_1a4eee68c40eb47b29e0b738ea38a55353" kindref="member">drawMatrix</ref>(<ref refid="class_images_p_1adc6b2ffa6cbfab6c1b83ed4bef74f1b9" kindref="member">markerCpy</ref>,<sp/>Point(240,240));</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_images_p_1ac2813bc8a3edac420df686902806172c" kindref="member">Markers</ref>[i].</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>!=<sp/><ref refid="definition_8h_1aa0e4cfe3919e1b2633bd67fbbae28ec5" kindref="member">MARKER_ID_CAR</ref><sp/>&amp;&amp;<sp/><ref refid="class_images_p_1ac2813bc8a3edac420df686902806172c" kindref="member">Markers</ref>[i].</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>!=<sp/><ref refid="definition_8h_1a6b35f14504af015e91cc6963cb51d6f5" kindref="member">MARKER_ID_ARRIVAL</ref>){<sp/></highlight><highlight class="comment">/*bloc*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;Point&gt;<sp/>point_marker;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_images_p_1aab5950c25ea44c06bc4026ce6dece7fa" kindref="member">fillRotatedRect</ref>(</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_images_p_1adc6b2ffa6cbfab6c1b83ed4bef74f1b9" kindref="member">markerCpy</ref>,<sp/>new_center,<sp/>Size2f(60,<sp/>60),<sp/>Scalar(255,255,255),<sp/><ref refid="class_images_p_1a03b81fad0317e9939085c5e7538c2efe" kindref="member">getAngle</ref>(<ref refid="class_images_p_1ac2813bc8a3edac420df686902806172c" kindref="member">Markers</ref>[i])</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point2f<sp/>pts<sp/>=<sp/><ref refid="class_images_p_1a50c2faf5197f1e0b5d54f4acdb9f82dd" kindref="member">getBlockMatrix</ref>(</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point2f(240,240),<sp/></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_center.x<sp/>-<sp/>(<ref refid="definition_8h_1a7ff61b468299d760aa0a3187ab24dddc" kindref="member">MARGE_BLOCK_PROCESSING</ref>*sqrt(2)),<sp/></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_center.y<sp/>-<sp/>(<ref refid="definition_8h_1a7ff61b468299d760aa0a3187ab24dddc" kindref="member">MARGE_BLOCK_PROCESSING</ref>*sqrt(2))</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int16_t<sp/>p_x<sp/>=<sp/>pts.x;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int16_t<sp/>p_y<sp/>=<sp/>pts.y;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(int16_t<sp/>ii=0;<sp/>ii&lt;6;<sp/>++ii){</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(int16_t<sp/>jj=0;<sp/>jj&lt;6;++jj){</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bloc<sp/>=<sp/><ref refid="class_images_p_1a4e8b4ba0f6f6f408de4cc4c52ac29f27" kindref="member">willbeBlock</ref>(<ref refid="class_images_p_1adc6b2ffa6cbfab6c1b83ed4bef74f1b9" kindref="member">markerCpy</ref>,<sp/>Point(p_x+1,p_y+1),<sp/>16);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(bloc){</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>point_marker.push_back(<ref refid="class_images_p_1a0b371e65a472c1cce7d6dc83bd171e4d" kindref="member">getXYMatrix</ref>(p_y,<sp/>p_x));<sp/></highlight><highlight class="comment">//inverser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rectangle(<ref refid="class_images_p_1adc6b2ffa6cbfab6c1b83ed4bef74f1b9" kindref="member">markerCpy</ref>,<sp/>Point2f(p_x+2,p_y+2),<sp/>Point2f(p_x+18,p_y+18),<sp/>Scalar(0,<sp/>0,<sp/>255));</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_y<sp/>+=20;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_y<sp/>=<sp/>pts.y;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_x<sp/>+=20;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_images_p_1ab9e279526694a7ce421cfa11b9309ed1" kindref="member">all_block</ref>.insert(<ref refid="class_images_p_1ab9e279526694a7ce421cfa11b9309ed1" kindref="member">all_block</ref>.end(),<sp/>point_marker.begin(),<sp/>point_marker.end());</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_images_p_1ac2813bc8a3edac420df686902806172c" kindref="member">Markers</ref>[i].</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/><ref refid="definition_8h_1aa0e4cfe3919e1b2633bd67fbbae28ec5" kindref="member">MARKER_ID_CAR</ref>){</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_images_p_1a39c69bdd9469b4b8a2c9666e27afa7b0" kindref="member">angleCar</ref><sp/>=<sp/><ref refid="class_images_p_1a03b81fad0317e9939085c5e7538c2efe" kindref="member">getAngle</ref>(<ref refid="class_images_p_1ac2813bc8a3edac420df686902806172c" kindref="member">Markers</ref>[i]);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_images_p_1a79d1d01bae703caeee1033425e4f8f18" kindref="member">posCar</ref><sp/>=<sp/><ref refid="class_images_p_1a0b371e65a472c1cce7d6dc83bd171e4d" kindref="member">getXYMatrix</ref>(new_center.y,new_center.x);<sp/></highlight><highlight class="comment">//x<sp/>and<sp/>y<sp/>are<sp/>inversed<sp/>with<sp/>axis<sp/>openCV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_images_p_1ac2813bc8a3edac420df686902806172c" kindref="member">Markers</ref>[i].</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/><ref refid="definition_8h_1a6b35f14504af015e91cc6963cb51d6f5" kindref="member">MARKER_ID_ARRIVAL</ref>){</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_images_p_1a408c61aeceb9175481adb2daca707a48" kindref="member">angleArrival</ref><sp/>=<sp/><ref refid="class_images_p_1a03b81fad0317e9939085c5e7538c2efe" kindref="member">getAngle</ref>(<ref refid="class_images_p_1ac2813bc8a3edac420df686902806172c" kindref="member">Markers</ref>[i]);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_images_p_1a621b649c63d3967849103c03082af64c" kindref="member">posArrival</ref><sp/>=<sp/><ref refid="class_images_p_1a0b371e65a472c1cce7d6dc83bd171e4d" kindref="member">getXYMatrix</ref>(new_center.y,new_center.x);<sp/></highlight><highlight class="comment">//x<sp/>and<sp/>y<sp/>are<sp/>inversed<sp/>with<sp/>axis<sp/>openCV</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158" refid="class_images_p_1a0527e504ca88cece33edb90fef958c90" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_images_p_1a0527e504ca88cece33edb90fef958c90" kindref="member">ImagesP::init</ref>(){</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_images_p_1a143a67baa23fdc4b1c28beda0bd964f5" kindref="member">cap</ref><sp/>=<sp/>VideoCapture(<ref refid="definition_8h_1aa818b55bd43036cc3f26783302e4419b" kindref="member">CAM_EXTERN</ref>);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_images_p_1adc6b2ffa6cbfab6c1b83ed4bef74f1b9" kindref="member">markerCpy</ref><sp/>=<sp/>Mat(480,480,<sp/>CV_8UC3,<sp/>Scalar(0));</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_images_p_1a143a67baa23fdc4b1c28beda0bd964f5" kindref="member">cap</ref><sp/>&gt;&gt;<sp/><ref refid="class_images_p_1add620ec27d299fe470cade4a6bc1e632" kindref="member">markerImg</ref>;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_images_p_1a79d1d01bae703caeee1033425e4f8f18" kindref="member">posCar</ref><sp/>=<sp/>Point2f(-1,-1);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_images_p_1a621b649c63d3967849103c03082af64c" kindref="member">posArrival</ref><sp/>=<sp/>Point2f(-1,-1);</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="class_images_p_1a3c43049bf1ce2da9ffa88841e48c29e1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_images_p_1a3c43049bf1ce2da9ffa88841e48c29e1" kindref="member">ImagesP::readyForPath</ref>(){</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="class_images_p_1a79d1d01bae703caeee1033425e4f8f18" kindref="member">posCar</ref><sp/>!=<sp/>Point(-1,-1)<sp/>&amp;&amp;<sp/><ref refid="class_images_p_1a621b649c63d3967849103c03082af64c" kindref="member">posArrival</ref><sp/>!=<sp/>Point(-1,-1));</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="class_images_p_1aeb7483dee60e755fffcc9e6f9355fd43" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_images_p_1aeb7483dee60e755fffcc9e6f9355fd43" kindref="member">ImagesP::saveCalib</ref>(std::string<sp/>str){</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>ofstream<sp/>file(</highlight><highlight class="stringliteral">&quot;ressources/calib_file.txt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>file<sp/>&lt;&lt;<sp/>str.c_str();</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>file.close();</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="class_images_p_1a4048e5f515cb51cbf25211ec8b4854b7" refkind="member"><highlight class="normal">Point2f<sp/><ref refid="class_images_p_1a4048e5f515cb51cbf25211ec8b4854b7" kindref="member">ImagesP::loadCalib</ref>(){</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>Point2f<sp/>centerPt(-1,-1);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>line;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>ifstream<sp/>file(</highlight><highlight class="stringliteral">&quot;ressources/calib_file.txt&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(file.is_open()){</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(getline(file,<sp/>line)){</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(count<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>centerPt.x<sp/>=<sp/>std::stod(line);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(count<sp/>==<sp/>1){</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>centerPt.y<sp/>=<sp/>std::stod(line);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>centerPt;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file.close();</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>centerPt;</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198" refid="class_images_p_1a799c4550d96659d7d188b03f52bb9f4a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_images_p_1a799c4550d96659d7d188b03f52bb9f4a" kindref="member">ImagesP::calibration</ref>(){</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_images_p_1aeb7483dee60e755fffcc9e6f9355fd43" kindref="member">saveCalib</ref>(</highlight><highlight class="stringliteral">&quot;-1\n-1\n&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//reset<sp/>last<sp/>calib</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Marker&gt;<sp/>Markers_wait;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>index=0;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>timeout<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="class_images_p_1a143a67baa23fdc4b1c28beda0bd964f5" kindref="member">cap</ref>.read(<ref refid="class_images_p_1add620ec27d299fe470cade4a6bc1e632" kindref="member">markerImg</ref>))</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_images_p_1a43a0e66ed75a147c27474937f8c9112c" kindref="member">MDetector</ref>.detect(<ref refid="class_images_p_1add620ec27d299fe470cade4a6bc1e632" kindref="member">markerImg</ref>,Markers_wait);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Markers_wait.size()<sp/>&gt;<sp/><ref refid="class_images_p_1ac2813bc8a3edac420df686902806172c" kindref="member">Markers</ref>.size()){</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Point2f<sp/>centerPt(0,0);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;Markers_wait.size();i++){</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Markers_wait[i].</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/><ref refid="definition_8h_1a6036f5d317ce1f843aae2fdd46d845c9" kindref="member">MARKER_ID_AREA</ref>){</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>centerPt<sp/>=<sp/>Markers_wait[i].getCenter();</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>save(std::to_string(centerPt.x)<sp/>+</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">+<sp/>std::to_string(centerPt.y));</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_images_p_1aeb7483dee60e755fffcc9e6f9355fd43" kindref="member">saveCalib</ref>(save);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_images_p_1ac2813bc8a3edac420df686902806172c" kindref="member">Markers</ref><sp/>=<sp/>Markers_wait;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++index;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(index==5)</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usleep(50000);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(timeout<sp/>&gt;=<sp/>20*<ref refid="definition_8h_1ab2856357e321769fe3be828ba90bf154" kindref="member">TIMEOUT_CALIBRATION</ref>)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++timeout;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230" refid="class_images_p_1ae2aecf8db20e7b3bcd14a7182dfdaf29" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_images_p_1ae2aecf8db20e7b3bcd14a7182dfdaf29" kindref="member">ImagesP::startBlock</ref>(){</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_images_p_1ab9e279526694a7ce421cfa11b9309ed1" kindref="member">all_block</ref><sp/>=<sp/>std::vector&lt;Point&gt;(0);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>Point2f<sp/>centerPt<sp/>=<sp/><ref refid="class_images_p_1a4048e5f515cb51cbf25211ec8b4854b7" kindref="member">loadCalib</ref>();</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(centerPt.x<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_images_p_1af8bad8cf7cb3be74c084a0efc86ca73f" kindref="member">markersProcessing</ref>(centerPt);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;ERROR<sp/>CALIB<sp/>LOAD&quot;</highlight><highlight class="normal">&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240" refid="class_images_p_1afe9cff50f49fc67bd8938d8d0223fe81" refkind="member"><highlight class="normal">Point<sp/><ref refid="class_images_p_1afe9cff50f49fc67bd8938d8d0223fe81" kindref="member">ImagesP::getCarPosition</ref>(){</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Point((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<ref refid="class_images_p_1a79d1d01bae703caeee1033425e4f8f18" kindref="member">posCar</ref>.x,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<ref refid="class_images_p_1a79d1d01bae703caeee1033425e4f8f18" kindref="member">posCar</ref>.y);</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245" refid="class_images_p_1aaf0d33634f747f1defec833fbc6dfae2" refkind="member"><highlight class="normal">Point<sp/><ref refid="class_images_p_1aaf0d33634f747f1defec833fbc6dfae2" kindref="member">ImagesP::getArrivalPosition</ref>(){</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Point((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<ref refid="class_images_p_1a621b649c63d3967849103c03082af64c" kindref="member">posArrival</ref>.x,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<ref refid="class_images_p_1a621b649c63d3967849103c03082af64c" kindref="member">posArrival</ref>.y);</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249" refid="class_images_p_1adf17333e9b35092e96fef60bbbf80d74" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_images_p_1adf17333e9b35092e96fef60bbbf80d74" kindref="member">ImagesP::trackingCar</ref>(){</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//check<sp/>posCar<sp/>and<sp/>angleCar<sp/>after<sp/>use<sp/>this<sp/>function<sp/>!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_images_p_1a79d1d01bae703caeee1033425e4f8f18" kindref="member">posCar</ref><sp/>=<sp/>Point(-1,-1);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_images_p_1a39c69bdd9469b4b8a2c9666e27afa7b0" kindref="member">angleCar</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;<ref refid="class_images_p_1ac2813bc8a3edac420df686902806172c" kindref="member">Markers</ref>.size();i++){</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_images_p_1ac2813bc8a3edac420df686902806172c" kindref="member">Markers</ref>[i].</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/><ref refid="definition_8h_1aa0e4cfe3919e1b2633bd67fbbae28ec5" kindref="member">MARKER_ID_CAR</ref>){</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_images_p_1a79d1d01bae703caeee1033425e4f8f18" kindref="member">posCar</ref><sp/>=<sp/><ref refid="class_images_p_1ac2813bc8a3edac420df686902806172c" kindref="member">Markers</ref>[i].getCenter();</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_images_p_1a39c69bdd9469b4b8a2c9666e27afa7b0" kindref="member">angleCar</ref><sp/>=<sp/><ref refid="class_images_p_1a03b81fad0317e9939085c5e7538c2efe" kindref="member">getAngle</ref>(<ref refid="class_images_p_1ac2813bc8a3edac420df686902806172c" kindref="member">Markers</ref>[i]);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/glegall/prog_workspace/Robot_car/prog/sources/traitement/images.cpp"/>
  </compounddef>
</doxygen>
